프로그램과 프로세스 그리고 스레드의 차이

#프로세스(process)는 컴퓨터에서 실행되고 있는 프로그램
or 
운영체제로부터 시스템 자원을 할당받는 작업의 단위(할당받는 시스템 자원 : cpu시간, 주소공간, 메모리영역)
[메인 메모리에 할당되어 실행중인 상태인 프로그램
프로그램은 일반적으로 하드디스크에 저장되어 아무일도 하지 않는 상태이다. 
프로세스는 실행하면서 stack pointer, data, text, register 등 끊임 없이 변함 ]


#스레드(Thread)
프로세스 내 작업의 흐름을 지칭
- 스레드는 프로세스 내에서 각각 Stack만 따로 할당받고 Code, Data, Heap 영역은 공유
- 스레드는 한 프로세스 내에서 동작되는 여러 실행의 흐름으로, 
- 프로세스 내의 주소 공간이나 자원들(힙 공간 등)을 같은 프로세스 내에 스레드끼리 공유하면서 실행
- 같은 프로세스 안에 있는 여러 스레드들은 같은 힙 공간을 공유 
- 반면에 프로세스는 다른 프로세스의 메모리에 직접 접근할 수 없음
- 한 스레드가 프로세스 자원을 변경하면, 다른 이웃 스레드(sibling thread)도 그 변경 결과를 즉시 볼 수 있음

#프로세스가 다른 프로세스와 통신을 하기 위해서는 IPC를 사용해야 함.

[프로세스는 독립적으로 실행된다. 
즉, 독립 되어있다는 것은 다른 프로세스에게 영향을 받지 않는다고 말할 수 있다. 
(cf  스레드는 프로세스 안에서 자원을 공유하므로 영향을 받는다) 
이런 독립적 구조를 가진 프로세스 간의 통신을 해야 하는 상황이 있을 것이다. 
이를 가능하도록 해주는 것이 바로 IPC 통신이다. (커널을 통해)
IPC 통신에서 프로세스 간 데이터를 동기화하고 보호하기 위해 세마포어와 뮤텍스를 사용]

스레드 메모리 이점, 동시성에 장점. 그러나 동기화문제의 단점.
스레드는 메모리를 공유하기 때문에 다른 스레드와의 정보공유가 쉬운 점이 있음 
그러나 스레드의 경우 한 스레드에 문제가 생기면 다른 스레드에도 영향을 끼쳐 스레드로 이루어져 있는
프로세스에 영향을 줄 수 있는 단점이 있음.


- 멀티스레드 프로세스 : 하나의 응용프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업(태스크)을 처리하도록 하는 것
- 멀티 스레드 : 하나의 응용프로그램을 여러 개의 스레드로 구성하고 각 스레드로 하여금 하나의 작업을 처리하도록 하는 것
  윈도우, 리눅스 등 많은 운영체제들이 멀티 프로세싱을 지원하고 있지만 멀티 스레딩을 기본으로 하고 있음

멀티 프로세스 대신 멀티 스레드를 사용하는 이유?

-프로그램을 여러 개 키는 것보다 하나의 프로그램 안에서 여러 작업을 해결하는 것

이러면 ? 뭐가 좋나유
-자원의 효율성 증대
멀티 프로세스로 실행되는 작업을 멀티 스레드로 실행할 경우, 프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리
-처리 비용 감소 및 응답 시간 단축 
프로세스 간의 통신(IPC)보다 스레드 간의 통신의 비용이 적으므로 작업들 간의 통신의 부담이 줄어듬

주의 : 스레드 간 자원공유는 전역변수(data segement)를 이용하므로 함께 사용할 때 충돌발생가능 
